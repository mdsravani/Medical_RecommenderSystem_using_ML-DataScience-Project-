# -*- coding: utf-8 -*-
"""Healthrecommendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tsCaWG-TvGp38x91qIPwyHTZV4TnxTMO
"""
#Title: Personalized Medical Recommendation System with Machine Learning
import pandas as pd

df=pd.read_csv("/content/Training.csv")

df.head()

df.shape

len(df['prognosis'].unique())

df['prognosis'].unique()

"""# Train Test **split**"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

X=df.drop("prognosis", axis=1)
y=df["prognosis"]

le= LabelEncoder()
le.fit(y)
Y=le.transform(y)

y

X

X_train,X_test,y_train,y_test=train_test_split(X,y, test_size=0.3,random_state=20)

X_train.shape,X_test.shape,y_train.shape,y_test.shape

"""# **Training Top Models**"""

from sklearn.datasets import make_classification
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import MultinomialNB
from sklearn .metrics import accuracy_score, confusion_matrix
import numpy as np

models={
    "SVC":SVC(kernel='linear'),
    "RandomForest":RandomForestClassifier(n_estimators=100,random_state=42),
    "GradientBoosting":GradientBoostingClassifier(n_estimators=100,random_state=42),
    "MultinomialNB":MultinomialNB()
}
for model_name, model in models.items():
  model.fit(X_train,y_train)
  predictions=model.predict(X_test)
  accuracy=accuracy_score(y_test,predictions)
  cm=confusion_matrix(y_test,predictions)
  print(f"{model_name} accuracy:{accuracy}")
  print(f"{model_name} Confusion Matrix:")
  print(np.array2string(cm, separator=','))

"""# **Single Prediction**"""

svc=SVC(kernel='linear')
svc.fit(X_train,y_train)
ypred=svc.predict(X_test)
accuracy_score(y_test,ypred)

import pickle
pickle.dump(svc,open("svc.pkl",'wb'))

svc = pickle.load(open('/content/svc.pkl','rb'))

X_test.iloc[0].values.reshape(1,-1)

# Predicting and printing the label
print("Predicted Label:", svc.predict(X_test.iloc[[0]]))
print("Actual Label:", y_test.iloc[0])

print("Predicted Label:", svc.predict(X_test.iloc[10].values.reshape(1,-1)))
print("Actual Label:", y_test.iloc[10])

"""# Recommendation System and Prediction

# **Load DataBases**
"""

symt_des=pd.read_csv("/content/symtoms_df.csv")
precautions=pd.read_csv("/content/precautions_df.csv")
workout=pd.read_csv("/content/workout_df.csv")
description=pd.read_csv("/content/description.csv")
medication=pd.read_csv("/content/medications.csv")
diets=pd.read_csv("/content/diets.csv")

diets

medication

description

workout

precautions

symt_des

np.zeros(10)

symptoms_dict = {'itching': 0, 'skin_rash': 1, 'nodal_skin_eruptions': 2, 'continuous_sneezing': 3, 'shivering': 4, 'chills': 5, 'joint_pain': 6, 'stomach_pain': 7, 'acidity': 8, 'ulcers_on_tongue': 9, 'muscle_wasting': 10, 'vomiting': 11, 'burning_micturition': 12, 'spotting_ urination': 13, 'fatigue': 14, 'weight_gain': 15, 'anxiety': 16, 'cold_hands_and_feets': 17, 'mood_swings': 18, 'weight_loss': 19, 'restlessness': 20, 'lethargy': 21, 'patches_in_throat': 22, 'irregular_sugar_level': 23, 'cough': 24, 'high_fever': 25, 'sunken_eyes': 26, 'breathlessness': 27, 'sweating': 28, 'dehydration': 29, 'indigestion': 30, 'headache': 31, 'yellowish_skin': 32, 'dark_urine': 33, 'nausea': 34, 'loss_of_appetite': 35, 'pain_behind_the_eyes': 36, 'back_pain': 37, 'constipation': 38, 'abdominal_pain': 39, 'diarrhoea': 40, 'mild_fever': 41, 'yellow_urine': 42, 'yellowing_of_eyes': 43, 'acute_liver_failure': 44, 'fluid_overload': 45, 'swelling_of_stomach': 46, 'swelled_lymph_nodes': 47, 'malaise': 48, 'blurred_and_distorted_vision': 49, 'phlegm': 50, 'throat_irritation': 51, 'redness_of_eyes': 52, 'sinus_pressure': 53, 'runny_nose': 54, 'congestion': 55, 'chest_pain': 56, 'weakness_in_limbs': 57, 'fast_heart_rate': 58, 'pain_during_bowel_movements': 59, 'pain_in_anal_region': 60, 'bloody_stool': 61, 'irritation_in_anus': 62, 'neck_pain': 63, 'dizziness': 64, 'cramps': 65, 'bruising': 66, 'obesity': 67, 'swollen_legs': 68, 'swollen_blood_vessels': 69, 'puffy_face_and_eyes': 70, 'enlarged_thyroid': 71, 'brittle_nails': 72, 'swollen_extremeties': 73, 'excessive_hunger': 74, 'extra_marital_contacts': 75, 'drying_and_tingling_lips': 76, 'slurred_speech': 77, 'knee_pain': 78, 'hip_joint_pain': 79, 'muscle_weakness': 80, 'stiff_neck': 81, 'swelling_joints': 82, 'movement_stiffness': 83, 'spinning_movements': 84, 'loss_of_balance': 85, 'unsteadiness': 86, 'weakness_of_one_body_side': 87, 'loss_of_smell': 88, 'bladder_discomfort': 89, 'foul_smell_of urine': 90, 'continuous_feel_of_urine': 91, 'passage_of_gases': 92, 'internal_itching': 93, 'toxic_look_(typhos)': 94, 'depression': 95, 'irritability': 96, 'muscle_pain': 97, 'altered_sensorium': 98, 'red_spots_over_body': 99, 'belly_pain': 100, 'abnormal_menstruation': 101, 'dischromic _patches': 102, 'watering_from_eyes': 103, 'increased_appetite': 104, 'polyuria': 105, 'family_history': 106, 'mucoid_sputum': 107, 'rusty_sputum': 108, 'lack_of_concentration': 109, 'visual_disturbances': 110, 'receiving_blood_transfusion': 111, 'receiving_unsterile_injections': 112, 'coma': 113, 'stomach_bleeding': 114, 'distention_of_abdomen': 115, 'history_of_alcohol_consumption': 116, 'fluid_overload.1': 117, 'blood_in_sputum': 118, 'prominent_veins_on_calf': 119, 'palpitations': 120, 'painful_walking': 121, 'pus_filled_pimples': 122, 'blackheads': 123, 'scurring': 124, 'skin_peeling': 125, 'silver_like_dusting': 126, 'small_dents_in_nails': 127, 'inflammatory_nails': 128, 'blister': 129, 'red_sore_around_nose': 130, 'yellow_crust_ooze': 131}
diseases_list = {15: 'Fungal infection', 4: 'Allergy', 16: 'GERD', 9: 'Chronic cholestasis', 14: 'Drug Reaction', 33: 'Peptic ulcer diseae', 1: 'AIDS', 12: 'Diabetes ', 17: 'Gastroenteritis', 6: 'Bronchial Asthma', 23: 'Hypertension ', 30: 'Migraine', 7: 'Cervical spondylosis', 32: 'Paralysis (brain hemorrhage)', 28: 'Jaundice', 29: 'Malaria', 8: 'Chicken pox', 11: 'Dengue', 37: 'Typhoid', 40: 'hepatitis A', 19: 'Hepatitis B', 20: 'Hepatitis C', 21: 'Hepatitis D', 22: 'Hepatitis E', 3: 'Alcoholic hepatitis', 36: 'Tuberculosis', 10: 'Common Cold', 34: 'Pneumonia', 13: 'Dimorphic hemmorhoids(piles)', 18: 'Heart attack', 39: 'Varicose veins', 26: 'Hypothyroidism', 24: 'Hyperthyroidism', 25: 'Hypoglycemia', 31: 'Osteoarthristis', 5: 'Arthritis', 0: '(vertigo) Paroymsal  Positional Vertigo', 2: 'Acne', 38: 'Urinary tract infection', 35: 'Psoriasis', 27: 'Impetigo'}
'''def get_predicted_values(patient_symptoms):
  input_vector=np.zeros(len(symptoms_dict))
  for i in patient_symptoms:
    input_vector[symptoms_dict[i]]=1
  return diseases_list[svc.predict([input_vector])[0]]'''

#test 1:'''
'''symptoms= input("Enter your symptoms.......")
user_symptoms=[s.strip() for s in symptoms.split(',')]
user_symptoms=[sym.strip("[]' ") for  sym in user_symptoms]
predicted_disease = get_predicted_values(user_symptoms)
predicted_disease'''

def helper(dis):
  descr = description[description['Disease']==predicted_disease]['Description']
  descr = " ".join([w for  w in descr])

  pre = precautions[precautions['Disease']==predicted_disease][['Precaution_1','Precaution_2','Precaution_3','Precaution_4']]
  pre = [col for col in pre.values]

  med=medication[medication['Disease']==dis]['Medication']
  med=[med for dis in med.values]

  die = diets[diets['Disease']== dis]['Diet']
  die = [die for die in die.values]

  wkout=workout[workout['disease']==dis] ['workout']

  return descr,pre,med,die,wkout

import numpy as np

# Assuming `symptoms_dict`, `diseases_list`, and `svc` are already defined and properly configured
def get_predicted_values(patient_symptoms):
    # Initialize a zero vector for symptoms
    input_vector = np.zeros(len(symptoms_dict))

    # Set symptoms present in patient_symptoms
    for symptom in patient_symptoms:
        if symptom in symptoms_dict:
            input_vector[symptoms_dict[symptom]] = 1
        else:
            print(f"Warning: '{symptom}' is not a recognized symptom.")

    # Reshape input vector for compatibility with scikit-learn
    input_vector = input_vector.reshape(1, -1)

    try:
        # Predict the disease label or index
        prediction = svc.predict(input_vector)[0]

        # If `prediction` is an index, retrieve the disease name from `diseases_list`
        if isinstance(prediction, int):
            return diseases_list[prediction]

        # If `prediction` is already a disease name, return it directly
        elif isinstance(prediction, str):
            return prediction
        else:
            print("Unexpected prediction format:", prediction)
            return None

    except Exception as e:
        print(f"Error during prediction: {e}")
        return None

# Test code to get input from the user
symptoms = input("Enter your symptoms (comma-separated): ")
# Clean up user input and split into a list of symptoms
user_symptoms = [sym.strip("[]' ") for sym in symptoms.split(',')]

# Predict disease based on input symptoms
predicted_disease = get_predicted_values(user_symptoms)
descr,pre,med,die,wkout=helper(predicted_disease)
print("======================Predicted Disease===================")
print(predicted_disease)
print("======================Description=========================")
print(descr)
print("======================Precautions=========================")
i=1
for p in pre[0]:
  print(i,": ",p)
  i+=1
print("======================Medication=========================")
i=1
for p in med:
  print(i,": ",p)
  i+=1
#print(med)
print("======================Diet===============================")
i=1
for p in die:
  print(i,": ",p)
  i+=1
#print(die)
print("======================workout=============================")
i=1
for p in wkout:
  print(i,": ",p)
  i+=1
#print(wkout)
if predicted_disease:
    print("Predicted disease:", predicted_disease)
else:
    print("Could not predict a disease based on the provided symptoms.")

import sklearn
print(sklearn.__version__)